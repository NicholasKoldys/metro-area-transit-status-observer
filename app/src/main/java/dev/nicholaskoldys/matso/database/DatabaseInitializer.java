package dev.nicholaskoldys.matso.database;

import dev.nicholaskoldys.matso.model.Bus;
import dev.nicholaskoldys.matso.model.Route;
import dev.nicholaskoldys.matso.utility.Constants;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.LocalTime;

import static dev.nicholaskoldys.matso.utility.Constants.TableConstants.*;

public class DatabaseInitializer {

    public static DatabaseInitializer instance;

    private DatabaseInitializer() {
        createStructure();
        initSchema();
        fillInData();
    }

    private static DatabaseInitializer getInstance() {
        if(instance == null) {
            instance = new DatabaseInitializer();
        }
        return instance;
    }

    public static DatabaseInitializer initializeDatabase() {
        return DatabaseInitializer.getInstance();
    }

    private void createStructure() {

        if(!isDatabaseStructureCreated()) {
            try {
                createSchema();
                createUserTable();
                createRoutesTable();
                createBusesTable();
                createBusChartTable();
                createBusInsertTrigger();
                createBusUpdateTrigger();
                createRouteInsertTrigger();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void createSchema() {

        try (PreparedStatement createStatement = DBConnection.getConnection()
                .prepareStatement(
                        "CREATE SCHEMA " + STRUCTURE_SCHEMA + " AUTHORIZATION DBA;"
                )
        ) {
            createStatement.execute();
            System.out.println("Created schema");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void createUserTable() {

        try (PreparedStatement createStatement = DBConnection.getConnection()
                .prepareStatement(
                        "CREATE TABLE IF NOT EXISTS" + " " + TABLE_USER + " ("
                                + USER_ID + " " + "INT" + " " + "GENERATED BY DEFAULT AS "
                                    + "IDENTITY(START WITH 1, INCREMENT BY 1)" + ", "
                                + USER_NAME + " " + "VARCHAR(40)" + " " + "NOT NULL" + ", "
                                + USER_PASSWORD + " " + "VARCHAR(50)" + " " + "NOT NULL" + ", "
                                + USER_ACTIVE + " " + "TINYINT" + " " + "DEFAULT '1' NOT NULL" + ", "
                                + USER_LOGGEDIN + " " + "TINYINT" + " " + "DEFAULT '0' NOT NULL" + ", "
                                + USER_LASTLOGIN + " " + "TIMESTAMP" + " " + "NOT NULL" + ", "
                                + USER_ATTEMPT + " " + "INT" + " " + "DEFAULT '00' NOT NULL" + ", "
                                + CREATE_DATE + " " + "TIMESTAMP" + " " + "NOT NULL" + ", "
                                + CREATED_BY + " " + "VARCHAR(40)" + " " + "NOT NULL" + ", "
                                + LAST_UPDATE + " " + "TIMESTAMP" + " " + "NOT NULL" + ", "
                                + LAST_UPDATE_BY + " " + "VARCHAR(40)" + " " + "NOT NULL" + ", "
                                + "PRIMARY KEY" + " " + "(" + USER_ID + ")"
                                + ");"
                )
        ) {
            createStatement.execute();
            System.out.println("Created users table");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void createRoutesTable() {

        try (PreparedStatement createStatement = DBConnection.getConnection()
                .prepareStatement(
                        "CREATE TABLE IF NOT EXISTS" + " " + TABLE_ROUTES + " ("
                                + ROUTE_ID + " " + "INT" + " " + "GENERATED BY DEFAULT AS "
                                    + "IDENTITY(START WITH 1, INCREMENT BY 1)" + ", "
                                + ROUTE_NUM + " " + "VARCHAR(40)" + " " + "NOT NULL" + ", "
                                + ROUTE_STARTPOINT + " " + "VARCHAR(40)" + " " + "NOT NULL" + ", "
                                + ROUTE_ENDPOINT + " " + "VARCHAR(40)" + " " + "NOT NULL" + ", "
                                + ROUTE_STOPSTOTAL + " " + "INT" + " " + "NOT NULL" + ", "
                                + ROUTE_TIMELENGTH + " " + "TIME" + " " + "NOT NULL" + ", "
                                + ROUTE_DISTANCE + " " + "DECIMAL(4,2)" + " " + "NOT NULL" + ", "
                                + ROUTE_CURRENTDELAY + " " + "TIME" + " " + "NOT NULL" + ", "
                                + ROUTE_CUSTOMERSAVG + " " + "INT" + " " + "NOT NULL" + ", "
                                + CREATE_DATE + " " + "TIMESTAMP" + " " + "NOT NULL" + ", "
                                + CREATED_BY + " " + "VARCHAR(40)" + " " + "NOT NULL" + ", "
                                + LAST_UPDATE + " " + "TIMESTAMP" + " " + "NOT NULL" + ", "
                                + LAST_UPDATE_BY + " " + "VARCHAR(40)" + " " + "NOT NULL" + ", "
                                + "PRIMARY KEY" + " " + "(" + ROUTE_ID + ")"
                                + ");"
                )
        ) {
            createStatement.execute();
            System.out.println("Created routes table");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void createBusesTable() {

        try (PreparedStatement createStatement = DBConnection.getConnection()
                .prepareStatement(
                        "CREATE TABLE IF NOT EXISTS" + " " + TABLE_BUSES + " ("
                                + BUS_ID + " " + "INT" + " " + "GENERATED BY DEFAULT AS "
                                    + "IDENTITY(START WITH 1, INCREMENT BY 1)" + ", "
                                + BUS_NUM + " " + "VARCHAR(40)" + " " + "NOT NULL" + ", "
                                + BUS_ACTIVE + " " + "TINYINT" + " " + "NOT NULL" + ", "
                                + BUS_CAPACITY + " " + "INT" + " " + "NOT NULL" + ", "
                                + ROUTE_ID + " " + "INT" + " " + "DEFAULT NULL" + ", "
                                + BUS_MAINTENANCESTATE + " " + "VARCHAR(45)" + " " + "NOT NULL" + ", "
                                + BUS_LASTBREAKDOWN + " " + "TIMESTAMP" + " " + "DEFAULT NULL" + ", "
                                + CREATE_DATE + " " + "TIMESTAMP" + " " + "NOT NULL" + ", "
                                + CREATED_BY + " " + "VARCHAR(40)" + " " + "NOT NULL" + ", "
                                + LAST_UPDATE + " " + "TIMESTAMP" + " " + "NOT NULL" + ", "
                                + LAST_UPDATE_BY + " " + "VARCHAR(40)" + " " + "NOT NULL" + ", "
                                + "PRIMARY KEY" + " " + "(" + BUS_ID + ")" + ", "
                                + "FOREIGN KEY" + " " + "(" + ROUTE_ID + ")"
                                + " REFERENCES " + TABLE_ROUTES + " (" + ROUTE_ID + ")"
                                + ");"
                )
        ) {
            createStatement.execute();
            System.out.println("Created buses table");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void createBusChartTable() {

        try (PreparedStatement createStatement = DBConnection.getConnection()
                .prepareStatement(
                        "CREATE TABLE IF NOT EXISTS" + " " + TABLE_BUSCHART + " ("
                                + BUSCHART_ID + " " + "INT" + " " + "GENERATED BY DEFAULT AS "
                                    + "IDENTITY(START WITH 1, INCREMENT BY 1)" + ", "
                                + ROUTE_ID + " " + "INT" + " " + "DEFAULT NULL" + ", "
                                + BUS_ID + " " + "INT" + " " + "DEFAULT NULL" + ", "
                                + "PRIMARY KEY (" + BUSCHART_ID + ")" + ", "
                                + "FOREIGN KEY (" + ROUTE_ID + ")"
                                + " REFERENCES " + TABLE_ROUTES + " (" + ROUTE_ID + ")" + ", "
                                + "FOREIGN KEY (" + BUS_ID + ")"
                                + " REFERENCES " + TABLE_BUSES + " (" + BUS_ID + ")"
                                + ");"
                )
        ) {
            createStatement.execute();
            System.out.println("Create bus-chart table");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void createBusInsertTrigger() {

        try (PreparedStatement createStatement = DBConnection.getConnection()
                .prepareStatement(
                        "CREATE TRIGGER " + TRIGGER_INS_BUS + " "
                            + "AFTER INSERT ON " + TABLE_BUSES + " REFERENCING NEW AS new FOR EACH ROW "
                            + "BEGIN ATOMIC "
                                + "IF ( new." + BUS_ACTIVE + " = 1 ) "
                                + " THEN "
                                    + " INSERT INTO " + TABLE_BUSCHART + " (" + ROUTE_ID + ", " + BUS_ID + ") "
                                    + " VALUES (new." + ROUTE_ID + ", new." + BUS_ID + "); "
                                + "END IF; "

                                + "IF ( (SELECT count(" + ROUTE_ID + ") FROM " + TABLE_BUSCHART + " "
                                    + " WHERE " + ROUTE_ID + " = new." + ROUTE_ID + " "
                                        + " AND " + BUS_ID + " IS NULL ) >= 1 "
                                    + " AND "
                                    + " (SELECT count(" + ROUTE_ID + ") FROM " + TABLE_BUSCHART + " "
                                    + " WHERE " + ROUTE_ID + " = new." + ROUTE_ID + " "
                                        + " AND " + BUS_ID + " IS NOT NULL ) >= 1 ) "
                                + " THEN "
                                    + " DELETE FROM " + TABLE_BUSCHART + " "
                                    + " WHERE " + BUS_ID + " IS NULL AND " + ROUTE_ID + " = new." + ROUTE_ID + "; "
                                + "END IF; "
                            + "END"
                )
        ) {
            createStatement.execute();
            System.out.println("Create bus-chart insert bus trigger");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void createBusUpdateTrigger() {

        try (PreparedStatement createStatement = DBConnection.getConnection()
                .prepareStatement(
                        "CREATE TRIGGER " + TRIGGER_UPD_BUS + " "
                            + "AFTER UPDATE ON " + TABLE_BUSES  + " REFERENCING NEW AS new "
                            + "  OLD AS old FOR EACH ROW "
                            + "BEGIN ATOMIC "

                            /**/
                                + "IF ( old." + BUS_ACTIVE + " = 0 AND new." + BUS_ACTIVE + " = 1 ) "
                                + " THEN "
                                    + " INSERT INTO " + TABLE_BUSCHART + " (" + ROUTE_ID + ", " + BUS_ID + ") "
                                    + " VALUES (new." + ROUTE_ID + ", old." + BUS_ID + "); "
                                + "ELSEIF ( IFNULL(old." + ROUTE_ID + ", 0) "
                                    + " <> IFNULL(new." + ROUTE_ID + ", 0) AND new." + BUS_ACTIVE + " = 1) "
                                + " THEN "
                                    + " UPDATE " + TABLE_BUSCHART + " "
                                    + " SET " + ROUTE_ID + " = new." + ROUTE_ID + " "
                                    + " WHERE " + BUS_ID + " = old." + BUS_ID + "; "
                                + "END IF; "

                            /**/
                                + "IF ( old." + BUS_ACTIVE + " = 1 AND new." + BUS_ACTIVE + " = 0 ) "
                                + " THEN "
                                    + " DELETE FROM " + TABLE_BUSCHART + " "
                                    + " WHERE " + BUS_ID + " = old." + BUS_ID + "; "
                                + "END IF; "

                            /*Balance out Bus Chart / Allow Routes to show if they have no buses assigned*/
                                + "IF ( (SELECT count(" + ROUTE_ID + ") FROM " + TABLE_BUSCHART + " "
                                        + " WHERE " + ROUTE_ID + " = old.routeId) = 0 ) "
                                + " THEN "
                                    + " INSERT INTO " + TABLE_BUSCHART + " (" + ROUTE_ID + ") "
                                    + " VALUES (old." + ROUTE_ID + "); "
                                + "END IF; "

                            /**/
                                + "IF ( (SELECT count(" + ROUTE_ID + ") FROM " + TABLE_BUSCHART + " "
                                    + " WHERE " + ROUTE_ID + " = new." + ROUTE_ID + " "
                                        + " AND " + BUS_ID + " IS NULL) >= 1 "
                                        + " AND "
                                    + " (SELECT count(" + ROUTE_ID + ") FROM " + TABLE_BUSCHART + " "
                                    + " WHERE " + ROUTE_ID + " = new." + ROUTE_ID + " "
                                        + " AND " + BUS_ID + " IS NOT NULL) >= 1) "
                                + " THEN "
                                    + " DELETE FROM " + TABLE_BUSCHART + " "
                                    + " WHERE " + BUS_ID + " IS NULL AND " + ROUTE_ID + " = new." + ROUTE_ID + "; "
                                + "END IF; "

                            /**/
                                + "IF ( (SELECT count(" + BUSCHART_ID + ") FROM " + TABLE_BUSCHART + " "
                                    + " WHERE " + ROUTE_ID + " IS NULL AND " + BUS_ID + " IS NULL) >= 1) "
                                + " THEN "
                                    + " DELETE FROM " + TABLE_BUSCHART + " "
                                    + " WHERE " + BUS_ID + " IS NULL AND " + ROUTE_ID + " IS NULL; "
                                + "END IF; "
                            + "END"
                )
        ) {
            createStatement.execute();
            System.out.println("Create bus-chart update bus trigger");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void createRouteInsertTrigger() {

        try (PreparedStatement createStatement = DBConnection.getConnection()
                .prepareStatement(
                        "CREATE TRIGGER " + TRIGGER_INS_ROUTE + " "
                            + "AFTER INSERT ON " + TABLE_ROUTES + " REFERENCING NEW AS new FOR EACH ROW "
                            + "BEGIN ATOMIC "
                                + "IF ( (SELECT COUNT(" + ROUTE_ID + ") FROM " + TABLE_BUSCHART
                                    + " WHERE " + ROUTE_ID + " = new." + ROUTE_ID + ") = 0) "
                                + " THEN "
                                    + " INSERT INTO " + TABLE_BUSCHART + " (" + ROUTE_ID + ") "
                                    + " VALUES (new." + ROUTE_ID + "); "
                                + "END IF; "
                            + "END"
                )
        ) {
            createStatement.execute();
            System.out.println("Create bus-chart insert route trigger");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void initSchema() {

        try (PreparedStatement createStatement = DBConnection.getConnection()
                .prepareStatement(
                        "SET SCHEMA " + STRUCTURE_SCHEMA +";"
                )
        ) {
            createStatement.execute();
            System.out.println("Init schema");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void fillInData() {

        if(!isDataFilled()) {
            try {
                addUserStraight("test", "secret");
                addUserStraight("NKoldys", "futurefunk");

                if (Repository.getInstance().userLogin("NKoldys", "futurefunk")) {

                    Route route1 = new Route(
                            "N100A",
                            "HWY 100 N Simple St.",
                            "HWY 100 N Acorn Ave.",
                            14,
                            LocalTime.parse("01:40:00"),
                            22.5F,
                            LocalTime.parse("00:10:00"),
                            170
                    );
                    Repository.getInstance().submitRoute(route1);

                    Route route2 = new Route(
                            "S080B",
                            "HWY 80 S Lime Rd.",
                            "HWY 100 N Walnut Ave.",
                            22,
                            LocalTime.parse("02:10:00"),
                            32.75F,
                            LocalTime.parse("00:08:00"),
                            280
                    );
                    Repository.getInstance().submitRoute(route2);

                    Route route3 = new Route(
                            "E077C",
                            "HWY 77 W Waffle Ln.",
                            "HWY 77 E Tabasco Lo.",
                            35,
                            LocalTime.parse("03:00:00"),
                            30F,
                            LocalTime.parse("00:15:00"),
                            530
                    );
                    Repository.getInstance().submitRoute(route3);

                    Route route4 = new Route(
                            "W077D",
                            "HWY 77 E Future Cr.",
                            "HWY 77 W Lookout Pt.",
                            12,
                            LocalTime.parse("03:40:00"),
                            58F,
                            LocalTime.parse("00:18:00"),
                            400
                    );
                    Repository.getInstance().submitRoute(route4);

                    for(int x =1; x <= 4;x++ ) {
                        char letter = (char)(64 + x);
                        Route route  = route1;
                        if (x == 2) {
                            route = route2;
                        } else if (x == 3) {
                            route = route3;
                        } else if (x == 4) {
                            route = route4;
                        }

                        for (int i = 1; i <= 9; i++) {
                            Constants.MaintenanceState mState = Constants.MaintenanceState.OK;
                            LocalDateTime lBreak = null;

                            if (i % 3 == 0) {
                                lBreak = LocalDateTime.now();
                            }
                            if (i % 4 == 0) {
                                mState = Constants.MaintenanceState.SERVICE;
                            }
                            if (i % 7 == 0) {
                                mState = Constants.MaintenanceState.OUT_OF_ORDER;
                            }

                            Repository.getInstance().submitBus(new Bus(
                                    "00" + i + letter,
                                    45,
                                    route.getRouteId(),
                                    route.getRouteNum(),
                                    mState,
                                    lBreak
                            ));
                        }
                    }
                }

                /*InputStream countryInput = getClass().getClassLoader().getResourceAsStream("countryList.txt");
                ReadFromFileUtil.sendInputStreamToFunc(countryInput, new Consumer<String>() {
                    @Override
                    public void accept(String country) {
                        AddressBook.getInstance().addCountry(new Country(country));
                    }
                });*/

                /*AppointmentCalendar.getInstance().loginUser("test", "secret");
                AppointmentCalendar.getInstance().setupApplicationCalendar();
                User testUser = AppointmentCalendar.getCurrentUser();*/

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void addUserStraight(String name, String pass) {
        try (PreparedStatement insertStatement = DBConnection.getConnection().prepareStatement(
                "INSERT INTO " + TABLE_USER
                        + " (" + USER_NAME
                        + ", " + USER_PASSWORD
                        + ", " + USER_ACTIVE
                        + ", " + USER_LOGGEDIN
                        + ", " + USER_LASTLOGIN
                        + ", " + USER_ATTEMPT
                        + ", " + CREATE_DATE
                        + ", " + CREATED_BY
                        + ", " + LAST_UPDATE
                        + ", " + LAST_UPDATE_BY + ") "
                        + " VALUES (?, "
                        + Constants.EnvironmentVariables.ENCRYPTION_METHOD("?") + ", 1, 0, "
                        + Constants.EnvironmentVariables.CURRENT_TIMESTAMP_METHOD + ", 0, "
                        + Constants.EnvironmentVariables.CURRENT_TIMESTAMP_METHOD + ", ?, "
                        + Constants.EnvironmentVariables.CURRENT_TIMESTAMP_METHOD + ", ?)"
        )) {
            insertStatement.setString(1, name);
            insertStatement.setString(2, pass);
            insertStatement.setString(3, "NKoldys");
            insertStatement.setString(4, "NKoldys");
            insertStatement.execute();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }//UserDAOImpl.getInstance().create(new User("test", "secret", true));
    }

    private boolean isDatabaseStructureCreated() {

        try (PreparedStatement selectStatement = DBConnection.getConnection()
                .prepareStatement(
                        "SELECT * FROM INFORMATION_SCHEMA.TABLES "
                                + "WHERE TABLE_SCHEMA LIKE '" + STRUCTURE_SCHEMA + "'"
                )
        ) {
            ResultSet results = selectStatement.executeQuery();
            int counter = 0;
            String checkedTables = "";
            while(results.next()) {
                checkedTables += results.getString(3) + ".. ";
                counter++;
            }
            System.out.println("Tables correctly set: " + checkedTables);
            //TODO Change to number of tables
            if(counter == 4) {
                System.out.println("Database Confirmed");
                return true;
            } else {
                System.out.println("Database Missing Tables");
                System.out.println("Table counter: " + counter);
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return false;
    }

    private boolean isDataFilled() {

        try (PreparedStatement selectStatement = DBConnection.getConnection()
                .prepareStatement(
                        "SELECT COUNT(*) FROM " + TABLE_USER
                )
        ) {
            ResultSet results = selectStatement.executeQuery();
            results.next();
            // TODO Change based on which database is used. Hsql count is a long.
            if(results.getLong(1) >= 2) {
                System.out.println("Database Contains Active Data");
                return true;
            } else {
                System.out.println("Database Contains No Active Data");
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return false;
    }
}